# Generated by Django 2.2.17 on 2021-10-08 13:24

from django.db import migrations, models
from caluma.caluma_workflow.utils import get_jexl_groups
from caluma.caluma_workflow import models as workflow_models
from datetime import timedelta
from django.utils import timezone
from caluma.caluma_user.models import BaseUser

WORKFLOW_ITEM_QUESTION = {
    10: "",  # Gesuchseingang
    13: "",  # Nachforderung
    14: "",  # Dosser formell vollstandig
    15: "",  # Publikation
    47: "",  # Bauentscheid
    55: "",  # Baubegin erfolgt
    56: "baukontrolle-realisierung-schnurgeruestabnahme",  # Schnergerustbanahme
    57: "",  # Meldung an Werne
    58: "baukontrolle-realisierung-rohbauabnahme",  # Rohbauabnahme
    59: "",  # Schlussabname
    67: "",  # Bau beendet
    68: "",  # Meldung an Geometer
    69: "",  # Meldung an Liegenschaftsschatzung
    81: "",  # Ruckweisung
    82: "",  # Ruckzug
    83: "",  # Abschreibung
    84: "",  # Sistierung
    85: "",  # Kant Gesamtentscheid
    86: "",  # Beschwerdefrist
    87: "",  # Baufreigabe
    88: "",  # Kanalisationsabnahme
}


def migrate_workflow(apps, schema_editor):
    if settings.APPLICATION_NAME != "kt_schwyz":
        return

    WorkflowEntry = apps.get_model("core", "WorkflowEntry")

    Case = apps.get_model("caluma_workflow", "Case")
    Task = apps.get_model("caluma_form", "Task")
    WorkItem = apps.get_model("caluma_workflow", "WorkItem")
    Form = apps.get_model("caluma_form", "Form")
    Document = apps.get_model("caluma_form", "Document")
    Question = apps.get_model("caluma_form", "Question")
    Answer = apps.get_model("caluma_form", "Answer")

    task = Task.objects.get(slug="building-authority")
    form = Form.objects.get(slug="bauverwaltung")

    cases = Case.objects.all().iterator()
    for case in cases:
        if not case.work_items.filter(task=task).exists():
            document = Document.objects.create(form=form)

            for workflow_item, question in WORKFLOW_ITEM_QUESTION.items():
                value = WorkflowEntry.objects.get(
                    workflow_item__id=workflow_item
                ).workflow_date
                question = Question.objects.get(slug=question)
                Answer.objects.create(document=document, question=question, value=value)

            WorkItem.objects.create(
                case=case,
                task=task,
                meta={},
                name=task.name,
                status=workflow_models.WorkItem.STATUS_READY,
                deadline=(timezone.now() + timedelta(seconds=task.lead_time)),
                addressed_groups=get_jexl_groups(
                    task.address_groups, task, case, BaseUser(), None, {}
                ),
                controlling_groups=get_jexl_groups(
                    task.control_groups, task, case, BaseUser(), None, {}
                ),
                document=document,
            )


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0088_auto_20211008_1524"),
    ]

    operations = [
        migrations.RunPython(migrate_workflow, reverse_code=migrations.RunPython.noop),
    ]
